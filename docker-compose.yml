volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  demo:


name: hsep_ai_base_kit

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - NODE_FUNCTION_ALLOW_BUILTIN=*
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2; ollama pull nomic-embed-text:v1.5; ollama pull qwen3:0.6b"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/127.0.0.1/6333 && echo -e 'GET /readyz HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && grep -q 'HTTP/1.1 200' <&3"]
      interval: 5s
      timeout: 3s
      retries: 4

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  huggingface-rerank-fastapi-app:
    build:
      context: .
      dockerfile: docker/Dockerfile_huggingface
    image: huggingface-rerank-fastapi-app:latest
    hostname: huggingface
    container_name: huggingface-rerank-fastapi-app
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "8001:8001"
   


  mem0-local:
    build:
      context: .
      dockerfile: docker/Dockerfile_mem0
    image: mem0-local:latest
    container_name: mem0-local
    restart: unless-stopped
    environment:
      # ---- Ollama
      OLLAMA_BASE_URL: "http://ollama:11434"
      LLM_MODEL: "gemma3:270m"
      LLM_TEMPERATURE: "0.1"
      LLM_MAX_TOKENS: "2048"
      # ---- Embeddings (be sure the dims match the model you pull in Ollama)
      EMBED_MODEL: "nomic-embed-text:v1.5"
      EMBED_DIMS: "768"
      # ---- Qdrant
      QDRANT_HOST: "qdrant"
      QDRANT_PORT: "6333"
      QDRANT_COLLECTION: "memories"
    ports:
      - "8002:8002"
    networks: ['demo']
    # depends_on:
    #   qdrant:
    #     condition: service_healthy

    # to run docker on cpu 
    # docker compose --profile cpu up -d

  qdrant-init:
    image: curlimages/curl:latest
    container_name: qdrant-init
    networks: ['demo']
    depends_on:
      qdrant:
        condition: service_healthy
    entrypoint: >
      sh -c "sleep 5; curl -X PUT http://qdrant:6333/collections/hybrid_rag -H 'Content-Type: application/json' -d '{\"vectors\": {\"default\": {\"distance\": \"Dot\", \"size\": 768}}, \"sparse_vectors\": {\"bm42\": {\"modifier\": \"idf\"}}}'"
  
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password # username: neo4j, password: password
      - NEO4JLABS_PLUGINS=["bloom", "graph-data-science"]
    networks: ['demo']